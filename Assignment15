#include <iostream>
#include <string>
#include <vector>
#include <math.h>
#include <stdio.h>

using namespace std;

void printSets(vector<string>, vector<string>);
void unionAB(vector<string>, vector<string>);
void intersectAB(vector<string>, vector<string>);
void sub(vector<string>, vector<string>);
void crossAB(vector<string>, vector<string>);
void powerset(vector<string>);
char userChoice();

int main() {
    
    vector<string> A;
    vector<string> B;
    char cont;
    string x;
    
    //DEBUG
    A = {"1", "2", "3"};
    B = {"2", "3", "4"};
    
    while(cont != 'n' && cont != 'N') {
        printSets(A, B);
        switch (userChoice()) {
            case '1':
                cout << "Add Item to A: ";
                cin >> x;
                cout << "\n\n";
                A.push_back(x);
                break;
            case '2':
                cout << "Add Item to B: ";
                cin >> x;
                B.push_back(x);
                cout << "\n\n";
                break;
            case '3':
                unionAB(A, B);
                break;
            case '4':
                intersectAB(A, B);
                break;
            case '5':
                cout << "A - B: {";
                sub(A, B);
                cout << "}\n\n";
                break;
            case '6':
                cout << "B - A: {";
                sub(B, A);
                cout << "}\n\n";
                break;
            case '7':
                crossAB(A, B);
                break;
            case '8':
                cout << "Powerset of A: {";
                powerset(A);
                cout << "}\n\n";
                break;
            case '9':
                cout << "Powerset of B: {";
                powerset(B);
                cout << "}\n\n";
                break;
            case '0':
                return 0;
                break;
            default:
                cout << "Error";
                break;
        }
    }
    
    return 0;
}

void printSets(vector<string> a, vector<string> b) {
    cout << "Set A = {";
    if (a.empty() == true) {
        cout << "";
    }
    else {
        for(auto element: a){
            cout << "{" << element << "}";
        }
    }
    cout << "}\n";
    
    cout << "Set B = {";
    if (b.empty() == true) {
        cout << "";
    }
    else {
        for(auto element: b){
            cout << "{" << element << "}";
        }
    }
    cout << "}\n\n";
}

char userChoice () {
    char choice;
    
    cout << "1 : Add Item to A\n"
         << "2 : Add Item to B\n"
         << "3 : A U B\n"
         << "4 : A ^ B\n"
         << "5 : A - B\n"
         << "6 : B - A\n"
         << "7 : A X B\n"
         << "8 : Powerset of A\n"
         << "9 : Powerset of B\n"
         << "0 : QUIT\n\n";
             
    cin >> choice;
    
    return choice;
}

void unionAB(vector<string> a, vector<string> b) {
    cout << "\nA U B: {";
    for (auto element: a) {
        cout << "{" << element << "}";
    }
    for (auto element: b) {
        cout << "{" << element << "}";
    }
    cout << "}\n\n";
}

void intersectAB(vector<string> a, vector<string> b) {
    cout << "\nA ^ B: {";
    for (auto elementA: a) {
        for (auto elementB: b) {
            if (elementA == elementB) {
                cout << "{" << elementA << "}";
            }
        }
    }
    cout << "}\n\n";
}

void sub(vector<string> a, vector<string> b) {
    for (auto elementA: a) {
        bool isEqual = false;
        for (auto elementB: b) {
            if (elementA == elementB) {
                isEqual = true;
            }
        }
        if (isEqual != true) {
            cout << "{" << elementA << "}";
        }
    }
}

void crossAB(vector<string> a, vector<string> b) {
    cout << "\nA X B: {";
    for (auto elementA: a) {
        for (auto elementB: b) {
            cout << "(" << elementA << ",";
            cout << "" << elementB << ")";
        }
    }
    cout << "}\n\n";
}

void powerset(vector<string> c) {
    int n = 0;
    for (auto element: c) {
        n++;
    }
    unsigned int pow_set_size = pow(2, n);
    for (int i = 0; i < pow_set_size; i++) {
        cout << "{";
        for (int j = 0; j < n; j++) {
            if (i & (1<<j)) {
                cout << c[j];
            }
        }
        cout << "}";
    }
}

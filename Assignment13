#include <iostream>
#include <stack>
//#include <vector>
//#include <iterator>

using namespace std;

void hanoi(int, stack<int>, stack<int>, stack<int>);
//void display(int, int[], int[], int[]);

/*class Tower {
        string name;
        int numberOfDisks;
    public:
        Tower(string, int);
        string disks[3] = {"-","-","-"};
        void print() {
            cout << name << "   ";
            for(auto i = 0; i < numberOfDisks; i++)
            {
                cout << disks[i] << " ";
            }
        }
    };

Tower::Tower(string n, int disks) {
    name = n;
    numberOfDisks = disks;
}*/

int main()
{
    int discNum;
    
    cout << "Welcome to Towers of Hanoi 2017, please input an integer between 1 and 100: ";
    do {
        cin >> discNum;
        if (discNum < 1 || discNum > 100) {
            cout << "Invalid input. ";
        }
    } while(discNum < 1 || discNum > 100);
    
    stack<int> start, end, aux;

    for (int i = discNum; i > 0; i--) {
        start.push(i);
    }
    
    hanoi(discNum, start, end, aux);

    return 0;
}

void hanoi(int n, stack<int> a, stack<int> b, stack<int> c) {
    if (n == 1) {
        b.push(a.top());
        a.pop();
        
        cout << "A: ";
        while(!a.empty()) {
            cout << a.top() << " ";
            a.pop();
        }
        cout << endl;
        
        cout << "B: ";
        while(!b.empty()) {
            cout << b.top() << " ";
            b.pop();
        }
        cout << endl;
        
        cout << "C: ";
        while(!c.empty()) {
            cout << c.top() << " ";
            c.pop();
        }
    }
    else {
        hanoi(n-1, a, c, b);
        b.push(a.top());
        a.pop();
        hanoi(n-1, b, a, c);
    }
    
}

/*void display(int n, int s[n], int e[n], int a[n]) {
   
}*/

/*#include <iostream>
#include <stack>

using namespace std;

void hanoi(int, stack<int>, stack<int>, stack<int>);
void print(stack<int>);

int main () {
    
    int discNum;
    
    discNum = 3;
    
    stack<int> start, end, aux;

    cout << "Bottom -->";
    for (int i = 1; i <= discNum; i++) {
        start.push(i);
        cout << start.top();
    }
    cout << "<-- Top";
    
    cout << "\n\n";
    print(start);
    
    return 0;
}

void print (stack<int> s) {
    stack<int> x;
    while (!s.empty()) {
        cout << s.top();
        x.push(s.top());
        s.pop();
    }
    cout << "\n\n";
    while (!x.empty()) {
        s.push(x.top());
        cout << s.top();
        x.pop();
    }
    cout << "\n\n";
    while (!s.empty()) {
        cout << s.top();
        x.push(s.top());
        s.pop();
    }
}*/






#include "stdafx.h"
#include <iostream>
#include <string>
#include <vector>
#include <cmath>

using namespace std;

struct TreeNode {
    string nodeName;
	int nodeNum;
    TreeNode *left;
    TreeNode *right;
    
    TreeNode (string n) {
        nodeName = n;
		nodeNum = NULL;
        left = NULL;
        right = NULL;
    }
};

vector<TreeNode*> nodes;
int countNodes = 0;
int treeDepth = 0;
int leafCount = 0;

void addLeftNode(TreeNode *&parent, string n) {
    parent->left = new TreeNode(n);
    nodes.push_back(parent->left);
	parent->left->nodeNum = parent->nodeNum + 1;
	countNodes++;
}

void addRightNode(TreeNode *&parent, string n) {
	parent->right = new TreeNode(n);
	nodes.push_back(parent->right);
	parent->right->nodeNum = parent->nodeNum + 1;
	countNodes++;
}

void calcDepth(TreeNode *&root, int nodeDepth) {
	TreeNode *diver;
	diver = root;
	if (diver->left == NULL && diver->right == NULL) {
		if (nodeDepth > treeDepth) {
			treeDepth = nodeDepth;
		}
	}
	else {
		nodeDepth++;
		if (diver->left != NULL) {
			calcDepth(diver->left, nodeDepth); 
		}
		if (diver->right != NULL) {
			calcDepth(diver->right, nodeDepth); 
		}
	}
}

void printTree(TreeNode* &root) {
	cout << endl;
	for (int i = 0; i < root->nodeNum; i++) {
		cout << "  ";
	}
	cout << "`-";
	cout << root->nodeName;
	if (root->right == NULL) {
		cout << endl;
		for (int i = 0; i < (root->nodeNum+1); i++) {
			cout << "  ";
		}
		cout << " -";
		cout << root->nodeName << "_right:NULL";
	}
	else if (root->right != NULL) {
		printTree(root->right);
	}
	if (root->left == NULL) {
		cout << endl;
		for (int i = 0; i < (root->nodeNum+1); i++) {
			cout << "  ";
		}
		cout << " -";
		cout << root->nodeName << "_left:NULL";
	}
	else if (root->left != NULL) {
		printTree(root->left);
	}
}

bool isFull (TreeNode* &root, int treeDepth) {
	TreeNode *diver;
	diver = root;
	if (root->left == NULL && root->right == NULL && diver->nodeNum == treeDepth) {
		leafCount++;
	}
	else {
		if (root->left != NULL) {
			isFull(root->left, treeDepth);
		}
		if (root->right != NULL) {
			isFull(root->right, treeDepth);
		} 
	}
	if (leafCount == (pow(2, treeDepth))) {
		return true;
	}
	return false;
}


int main() {
    char choice;
    string parentNode, newNode;
    TreeNode *root;
    root = new TreeNode("root");
    nodes.push_back(root);
	root->nodeNum = 0;
	countNodes++;
    
    while(true) {
		int nodeDepth = 0;
		calcDepth(root, nodeDepth);
		nodeDepth = 0;
		printTree(root);
		cout << endl << endl;
        cout << "Number of nodes: " << countNodes << endl;
		cout << "Depth: " << treeDepth << endl;
		leafCount = 0;
		if (isFull(root, treeDepth) == true) {
			cout << "Full? " << "Yes" << endl;
		}
		else {
			cout << "Full? "<< "No" << endl;
		}
		/*cout << "DEBUG============" << endl;
		cout << "treeDepth: " << treeDepth << endl;
		cout << "2^(treeDepth): " << (pow(2, treeDepth)) << endl;
		cout << "```````leafCount = " << leafCount << "``````````\n";
		cout << "DEBUG============" << endl;*/
        cout << "Complete?" << endl;
        cout << "Preorder: " << endl;
        cout << "Inorder: " << endl;
        cout << "Postorder: " << endl << endl;
        
        cout << "1. Add left child: " << endl;
        cout << "2. Add right child: " << endl;
        cout << "3. QUIT" << endl;
        cout << "INPUT: " << endl;
        cin >> choice;
        
        switch(choice) {
            case '1':
                cout << "Which node?" << endl;
                for (auto node: nodes) {
                    cout << "\t" << node->nodeName << endl;
                }
                cout << "INPUT: ";
                cin >> parentNode;
				for (auto node : nodes) {
                    if (node->nodeName == parentNode) {
                        if (node->left != NULL) {
                            cout << "==========================" << endl;
                            cout << "error: node->left != NULL" << endl;
							cout << "==========================" << endl;
                            break;
                        }
                        else {
                            cout << "Name left child for " << node->nodeName << ": ";
                            cin >> newNode;
                            addLeftNode(node, newNode);
							break;
                        }
                    }
                }
                cout << "\n\n";
                break;
            case '2':
				cout << "Which node?" << endl;
                for (auto node: nodes) {
                    cout << "\t" << node->nodeName << endl;
                }
                cout << "INPUT: ";
                cin >> parentNode;
                for (auto node: nodes) {
                    if (node->nodeName == parentNode) {
                        if (node->right != NULL) {
							cout << "==========================" << endl;
                            cout << "error: node->right != NULL" << endl;
							cout << "==========================" << endl;
                            break;
                        }
                        else {
                            cout << "Name right child for " << node->nodeName << ": ";
                            cin >> newNode;
                            addRightNode(node, newNode);
							break;
                        }
                    }
                }
                cout << "\n\n";
                break;
            case '3':
                return 0;
            default:
                cout << "Error";
                break;
        }
    }
}

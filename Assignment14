#include <iostream>
#include <stack>

using namespace std;

int factorial(int, stack<int>);
int fib(int, int, stack<int>);
void printStack(stack<int>);

int main () {
    int num, b, result;
    stack<int> callStack;
    
    cout << "Enter a number: ";
    cin >> num;
    
    do {
        cout << "Enter 1 for FACTORIAL, 2 for FIBONACCI: ";
        cin >> b;
        if (b == 1) {
            cout << endl;
            result = factorial(num, callStack);
        }
        else if (b == 2) {
            cout << endl;
            result = fib(num, num, callStack);
        }
        else {
            cout << "Invalid input." << endl;
        }
    } while(b != 1 && b != 2);
    
    cout << endl << "Result: " << result << endl;
    
    return 0;
}

int factorial (int n, stack<int> cS) {
    cS.push(n);
    printStack(cS);
    if (n <= 1) {
        printStack(cS);
        cS.pop();
        return 1;
    }
    else {
        int x = n * factorial(n-1, cS);
        printStack(cS);
        return x;
    }
}

int fib(int n, int m, stack<int> cS) {
    cS.push(n);
    cout << "calling f(" << cS.top() << ") from f(" << m << ")" << endl;
    if (n <= 2) {
        return 1;
    }
    else {
        int x = (fib(n-1, n, cS) + fib(n-2, n, cS));
        return x;
    }
}

void printStack(stack<int> cS) {
    int x = cS.top();
        cout << "=========" << endl;
    while (!cS.empty()) {
        cout << "n = " << cS.top() << endl;
        cS.pop();
    }
    for (int i = x; x > 0; x--) {
        cS.push(i);
    }
    cout << "=========" << endl;
    cout << endl;
}

/* OUTPUT
Enter a number: 4
Enter 1 for FACTORIAL, 2 for FIBONACCI: 1

=========
n = 4
=========

=========
n = 3
n = 4
=========

=========
n = 2
n = 3
n = 4
=========

=========
n = 1
n = 2
n = 3
n = 4
=========

=========
n = 1
n = 2
n = 3
n = 4
=========

=========
n = 2
n = 3
n = 4
=========

=========
n = 3
n = 4
=========

=========
n = 4
=========


Result: 24

-------------------------------------------------------------

Enter a number: 6
Enter 1 for FACTORIAL, 2 for FIBONACCI: 2

calling f(6) from f(6)
calling f(5) from f(6)
calling f(4) from f(5)
calling f(3) from f(4)
calling f(2) from f(3)
calling f(1) from f(3)
calling f(2) from f(4)
calling f(3) from f(5)
calling f(2) from f(3)
calling f(1) from f(3)
calling f(4) from f(6)
calling f(3) from f(4)
calling f(2) from f(3)
calling f(1) from f(3)
calling f(2) from f(4)

Result: 8
*/

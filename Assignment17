#include "stdafx.h"   //for use in Visual Studio Express
#include <iostream>
#include <vector>

using namespace std;

struct matrix {
	int rownum;
	int highdeg;
	vector<int> degvec;
	vector<int> row;
	vector<int> loopvec;
	vector<vector<int>> vecmat;
	bool isConnected;
	bool isComplete;
} adj;

void addEdge(matrix);
void highDeg(matrix);
void findIsoVert(matrix);
void findLoops(matrix);
void displayMatrix(matrix);
void isConnected(matrix);
void isComplete(matrix);

int main () {
    char input;
	adj.highdeg = 0;
	adj.isConnected = false;
	adj.isComplete = false;

    while (true) {
	cout << "=================================" << endl;
	cout << "=================================" << endl;
    displayMatrix(adj);
    
	highDeg(adj);
	cout << "Vertex with highest degree: " << adj.highdeg << endl;
    cout << "Isolated vertices: ";
	findIsoVert(adj);
	cout << endl;
    cout << "Loops: ";
	if (adj.loopvec.empty() == true) {
		cout << "None";
	}
	else
	{
		for (auto i: adj.loopvec) {
			cout << "(" << i << ") ";
		} 
	}
	cout << endl;
	cout << "Connected: ";
	isConnected(adj);
    cout << "Complete: ";
	isComplete(adj);
	cout << endl;
    
    cout << "1. Add Vertex" << endl;
    cout << "2. Add Edge" << endl;
    cout << "3. QUIT" << endl;
    cout << "INPUT: ";
    cin >> input;
    cout << endl << endl;
    
        switch (input) {
            case '1':
        		adj.rownum++;
        		adj.row.push_back(0);
				adj.degvec.push_back(0);
        		for (int i = 0; i < adj.rownum; i++) {
        			if (i != 0) {
        				adj.vecmat[i-1].push_back(0);
        			}
        		}
        		adj.vecmat.push_back(adj.row);
                break;
            case '2':
        		int vert1, vert2;
        		cout << "Vertex 1: ";
        		cin >> vert1;
        		cout << "Vertex 2: ";
        		cin >> vert2;
			
				if (vert1 == vert2) {
					for (int i = 0; i < adj.vecmat.size(); i++) {
        				if (i == vert1) {
        					for (int j = 0; j < adj.vecmat.at(i).size(); j++) {
        						if (j == vert2) {
        							adj.vecmat.at(i).at(j)+=2;
									adj.degvec.at(i)+=2;
									adj.loopvec.push_back(i);
        						}
        					}
        				}
        			}
				}
				else {
        			for (int i = 0; i < adj.vecmat.size(); i++) {
        				if (i == vert1) {
        					for (int j = 0; j < adj.vecmat.at(i).size(); j++) {
        						if (j == vert2) {
        							adj.vecmat.at(i).at(j)++;
									adj.degvec.at(i)++;
        						}
        					}
        				}
        			}
        			for (int i = 0; i < adj.vecmat.size(); i++) {
        				if (i == vert2) {
        					for (int j = 0; j < adj.vecmat.at(i).size(); j++) {
        						if (j == vert1) {
        							adj.vecmat.at(i).at(j)++;
									adj.degvec.at(i)++;
        						}
        					}
        				}
        			}
				}
                break;
            case '3':
                return 0;
            default:
            cout << "Error!" << endl;
                break;
        }
    }
    return 0;
}

void displayMatrix(matrix a) {
    int ver = 0;
    cout << "\n";
	for (auto i: a.vecmat) {
		cout << "Vertex: " << ver << " [";
		for (auto j: i) {
			cout << j << " ";
		}
		cout << "]" << "Degree: " << a.degvec.at(ver) << "\n";
		ver++;
	}
	cout << "\n";
}

void highDeg(matrix a) {
	for (int i = 0; i < adj.degvec.size(); i++) {
		if (adj.degvec[i] == 0) {}
		else {
			if (adj.degvec[i] > adj.degvec[adj.highdeg]) {
				adj.highdeg = i;
			}
		}
	}
}

void findIsoVert(matrix a) {
	bool noIso = true;
	for (int i = 0; i < a.degvec.size(); i++) {
		if (a.degvec[i] == 0) {
			cout << "(" << i << ") ";
			noIso = false;
		}
	}
	if (noIso == true) {
		cout << "None";
	}
}

void isConnected(matrix a) {
	for (auto i: a.degvec) {
		if (i == 0) {
			a.isConnected = false;
		}
		else {
			a.isConnected = true;
		}
	}
	if (a.isConnected == true) {
		cout << "Yes";
	}
	else {
		cout << "No";
	}
	cout << endl;
}

void isComplete(matrix a) {
	for (int i = 0; i < a.vecmat.size(); i++) {
		for (int j = 0; j < a.vecmat.at(i).size(); j++) {
			if (i == j) {}
			else {
				if (a.vecmat.at(i).at(j) == 0) {
					a.isComplete = false;
					break;
				}
				else {
					a.isComplete = true;
				}
			}
		}
	}
	if (a.isComplete == true) {
		cout << "Yes";
	}
	else {
		cout << "No";
	}
	cout << endl;
}

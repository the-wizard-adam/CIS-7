//#include "stdafx.h"
#include <iostream>
#include <vector>

using namespace std;

struct matrix {
	int rownum;
	vector<int> row;
	vector<vector<int>> vecmat;
} adj;

//void addVertex(matrix);
void addEdge(matrix);
int highDeg(matrix);
//int findIsoVert(int[][0]);
//int findLoops(int[][0]);
void displayMatrix(matrix);


int main () {
    char input;
    
    while (true) {
    displayMatrix(adj);
    
    cout << "Vertex with highest degree: " << highDeg(adj) << endl;
    cout << "Isolated vertices: " << endl;
    cout << "Loops : " << endl;
    cout << "Connected: " << endl;
    cout << "Complete: "  << endl << endl;
    
    cout << "1. Add Vertex" << endl;
    cout << "2. Add Edge" << endl;
    cout << "3. QUIT" << endl;
    cout << "INPUT: ";
    cin >> input;
    cout << endl << endl;
    
        switch (input) {
            case '1':
        		adj.rownum++;
        		adj.row.push_back(0);				
        		for (int i = 0; i < adj.rownum; i++) {
        			if (i != 0) {
        				adj.vecmat[i-1].push_back(0);
        			}
        		}
        		adj.vecmat.push_back(adj.row);
                break;
            case '2':
        		int vert1, vert2;
        		cout << "Vertex 1: ";
        		cin >> vert1;
        		cout << "Vertex 2: ";
        		cin >> vert2;
        
        		for (int i = 0; i < adj.vecmat.size(); i++) {
        			if (i == vert1) {
        				for (int j = 0; j < adj.vecmat.at(i).size(); j++) {
        					if (j == vert2) {
        						adj.vecmat.at(i).at(j) = 1;
        					}
        				}
        			}
        		}
        		for (int i = 0; i < adj.vecmat.size(); i++) {
        			if (i == vert2) {
        				for (int j = 0; j < adj.vecmat.at(i).size(); j++) {
        					if (j == vert1) {
        						adj.vecmat.at(i).at(j) = 1;
        					}
        				}
        			}
        		}
                break;
            case '3':
                return 0;
            default:
            cout << "Error!" << endl;
                break;
        }
    }
    return 0;
}

void displayMatrix(matrix a) {
    int ver = 0;
    cout << "\n";
	for (auto i: a.vecmat) {
		cout << "Vertex: " << ver << "[";
		for (auto j: i) {
			cout << j << " ";
		}
		cout << "]\n";
		ver++;
	}
	cout << "\n";
}

int highDeg(matrix a) {
    int deg;
    vector<int> degvec;
    for (auto i: a.vecmat) {
        for (auto j: i) {
            deg+=j;
        }
        degvec.push_back(deg);
    }
    for (int i = 0; i < degvec.size(); i++) {
        if (i == 0) {
            for (int j = 0; j < degvec.size(); j++) {
                if (degvec[i] < degvec[j]) {}
                else {
                    return i;
                }
            }
        }
        if (degvec[i] > degvec[i-1]) {
            return i;
        }
    }
    return 0;
}

int findIsoVert(int m[][0]) {
    return 0;
}

int findLoops(int m[][0]) {
    return 0;
}

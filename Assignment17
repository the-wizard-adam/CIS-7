#include "stdafx.h"
#include <iostream>
#include <vector>

using namespace std;

struct matrix {
	int rownum;
	vector<int> row;
	vector<vector<int>> vecmat;
} adj;

//void addVertex(matrix);
void addEdge(matrix);
//int highestDegree(int[][0]);
//int findIsoVert(int[][0]);
//int findLoops(int[][0]);
void displayMatrix(matrix);


int main () {
    char input;
    
    while (true) {
    displayMatrix(adj);
    
    cout << "Vertex with highest degree: " << endl;
    cout << "Isolated vertices: " << endl;
    cout << "Loops : " << endl;
    cout << "Connected: " << endl;
    cout << "Complete: "  << endl << endl;
    
    cout << "1. Add Vertex" << endl;
    cout << "2. Add Edge" << endl;
    cout << "3. QUIT" << endl;
    cout << "INPUT: ";
    cin >> input;
    cout << endl << endl;
    
        switch (input) {
            case '1':
		adj.rownum++;
		adj.row.push_back(0);				
		for (int i = 0; i < adj.rownum; i++) {
			if (i != 0) {
				adj.vecmat[i-1].push_back(0);
			}
		}
		adj.vecmat.push_back(adj.row);
                break;
            case '2':
		int vert1, vert2;
		cout << "Vertex 1: ";
		cin >> vert1;
		cout << "Vertex 2: ";
		cin >> vert2;

		for (int i = 0; i < adj.vecmat.size(); i++) {
			if (i == vert1) {
				for (int j = 0; j < adj.vecmat.at(i).size(); j++) {
					if (j == vert2) {
						adj.vecmat.at(i).at(j) = 1;
					}
				}
			}
		}
		for (int i = 0; i < adj.vecmat.size(); i++) {
			if (i == vert2) {
				for (int j = 0; j < adj.vecmat.at(i).size(); j++) {
					if (j == vert1) {
						adj.vecmat.at(i).at(j) = 1;
					}
				}
			}
		}
                break;
            case '3':
                return 0;
            default:
            cout << "Error!" << endl;
                break;
        }
    }
    return 0;
}

void displayMatrix(matrix a) {
	for (auto i: a.vecmat) {
		cout << "[";
		for (auto j: i) {
			cout << j << " ";
		}
		cout << "]\n";
	}
	cout << "\n";
}

/*void addVertex(matrix a) {
	a.col++;
	a.vecmat.clear();
	a.row.clear();
	for (int i = 0; i < a.col; i++){
		a.row.push_back(0);
	}
	for (int i = 0; i < a.col; i++) {
		a.vecmat.push_back(a.row);
	}
}*/

void addEdge(matrix a) {
	int vert1, vert2;
    cout << "Vertex 1: ";
	cin >> vert1;
	cout << "Vertex 2: ";
	cin >> vert2;

	for (int i = 0; i < a.vecmat.size(); i++) {
		if (i == vert1) {
			for (int j = 0; j < a.vecmat.at(i).size(); j++) {
				if (j == vert2) {
					a.vecmat.at(i).at(j) = 1;
				}
			}
		}
	}
}

/*int highDeg(int m[][0]) {
    return 0;
}

int findIsoVert(int m[][0]) {
    return 0;
}

int findLoops(int m[][0]) {
    return 0;
}*/

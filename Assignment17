#include <iostream>
#include <vector>

using namespace std;

void addVertex(vector<vector<int>>, vector<int>);
//void addEdge(int[][0]);
//int highestDegree(int[][0]);
//int findIsoVert(int[][0]);
//int findLoops(int[][0]);
void displayMatrix(vector<vector<int>>, vector<int>);

int main () {
    vector<int> row;
    vector<vector<int>> matrix;
    
    //int vertices = 0;
    //int matrix[vertices][vertices];
    char input;
    
    while (true) {
    displayMatrix(matrix, row);
    
    cout << "Vertex with highest degree: " << endl;
    cout << "Isolated vertices: " << endl;
    cout << "Loops : " << endl;
    cout << "Connected: " << endl;
    cout << "Complete: "  << endl << endl;
    
    cout << "1. Add Vertex" << endl;
    cout << "2. Add Edge" << endl;
    cout << "3. QUIT" << endl;
    cout << "INPUT: ";
    cin >> input;
    cout << endl << endl;
    
        switch (input) {
            case '1':
                addVertex(matrix, row);
                break;
            case '2':
                //addEdge(matrix);
                break;
            case '3':
                return 0;
            default:
            cout << "Error!" << endl;
                break;
        }
    }
    return 0;
}

void displayMatrix(vector<vector<int>> m, vector<int> r) {
    for (auto i: m) {
        for (auto j: r) {
            cout << j;
        }
        cout << endl;
    }
}

void addVertex(vector<vector<int>> m, vector<int> r) {
    r.push_back(0);
    m.push_back(r);
}

/*void addEdge(int m[][0]) {
    
}

int highDeg(int m[][0]) {
    return 0;
}

int findIsoVert(int m[][0]) {
    return 0;
}

int findLoops(int m[][0]) {
    return 0;
}*/
